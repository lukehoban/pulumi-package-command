// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.command.remote.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.core.internal.Codegen;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


/**
 * Instructions for how to connect to a remote endpoint.
 * 
 */
public final class ConnectionArgs extends com.pulumi.resources.ResourceArgs {

    public static final ConnectionArgs Empty = new ConnectionArgs();

    /**
     * SSH Agent socket path. Default to environment variable SSH_AUTH_SOCK if present.
     * 
     */
    @Import(name="agentSocketPath")
    private @Nullable Output<String> agentSocketPath;

    /**
     * @return SSH Agent socket path. Default to environment variable SSH_AUTH_SOCK if present.
     * 
     */
    public Optional<Output<String>> agentSocketPath() {
        return Optional.ofNullable(this.agentSocketPath);
    }

    /**
     * Max allowed errors on trying to dial the remote host. -1 set count to unlimited. Default value is 10.
     * 
     */
    @Import(name="dialErrorLimit")
    private @Nullable Output<Integer> dialErrorLimit;

    /**
     * @return Max allowed errors on trying to dial the remote host. -1 set count to unlimited. Default value is 10.
     * 
     */
    public Optional<Output<Integer>> dialErrorLimit() {
        return Optional.ofNullable(this.dialErrorLimit);
    }

    /**
     * The address of the resource to connect to.
     * 
     */
    @Import(name="host", required=true)
    private Output<String> host;

    /**
     * @return The address of the resource to connect to.
     * 
     */
    public Output<String> host() {
        return this.host;
    }

    /**
     * The password we should use for the connection.
     * 
     */
    @Import(name="password")
    private @Nullable Output<String> password;

    /**
     * @return The password we should use for the connection.
     * 
     */
    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * Max number of seconds for each dial attempt. 0 implies no maximum. Default value is 15 seconds.
     * 
     */
    @Import(name="perDialTimeout")
    private @Nullable Output<Integer> perDialTimeout;

    /**
     * @return Max number of seconds for each dial attempt. 0 implies no maximum. Default value is 15 seconds.
     * 
     */
    public Optional<Output<Integer>> perDialTimeout() {
        return Optional.ofNullable(this.perDialTimeout);
    }

    /**
     * The port to connect to.
     * 
     */
    @Import(name="port")
    private @Nullable Output<Double> port;

    /**
     * @return The port to connect to.
     * 
     */
    public Optional<Output<Double>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The contents of an SSH key to use for the connection. This takes preference over the password if provided.
     * 
     */
    @Import(name="privateKey")
    private @Nullable Output<String> privateKey;

    /**
     * @return The contents of an SSH key to use for the connection. This takes preference over the password if provided.
     * 
     */
    public Optional<Output<String>> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }

    /**
     * The password to use in case the private key is encrypted.
     * 
     */
    @Import(name="privateKeyPassword")
    private @Nullable Output<String> privateKeyPassword;

    /**
     * @return The password to use in case the private key is encrypted.
     * 
     */
    public Optional<Output<String>> privateKeyPassword() {
        return Optional.ofNullable(this.privateKeyPassword);
    }

    /**
     * The address of the bastion host to connect to.
     * 
     */
    @Import(name="proxyHost")
    private @Nullable Output<String> proxyHost;

    /**
     * @return The address of the bastion host to connect to.
     * 
     */
    public Optional<Output<String>> proxyHost() {
        return Optional.ofNullable(this.proxyHost);
    }

    /**
     * The password we should use for the bastion host connection.
     * 
     */
    @Import(name="proxyPassword")
    private @Nullable Output<String> proxyPassword;

    /**
     * @return The password we should use for the bastion host connection.
     * 
     */
    public Optional<Output<String>> proxyPassword() {
        return Optional.ofNullable(this.proxyPassword);
    }

    @Import(name="proxyPort")
    private @Nullable Output<Integer> proxyPort;

    public Optional<Output<Integer>> proxyPort() {
        return Optional.ofNullable(this.proxyPort);
    }

    /**
     * The contents of an SSH key to use for the bastion host to setup the connection. This takes preference over the password if provided.
     * 
     */
    @Import(name="proxyPrivateKey")
    private @Nullable Output<String> proxyPrivateKey;

    /**
     * @return The contents of an SSH key to use for the bastion host to setup the connection. This takes preference over the password if provided.
     * 
     */
    public Optional<Output<String>> proxyPrivateKey() {
        return Optional.ofNullable(this.proxyPrivateKey);
    }

    /**
     * The user that we should use for the bastion host connection.
     * 
     */
    @Import(name="proxyUser")
    private @Nullable Output<String> proxyUser;

    /**
     * @return The user that we should use for the bastion host connection.
     * 
     */
    public Optional<Output<String>> proxyUser() {
        return Optional.ofNullable(this.proxyUser);
    }

    /**
     * The user that we should use for the connection.
     * 
     */
    @Import(name="user")
    private @Nullable Output<String> user;

    /**
     * @return The user that we should use for the connection.
     * 
     */
    public Optional<Output<String>> user() {
        return Optional.ofNullable(this.user);
    }

    private ConnectionArgs() {}

    private ConnectionArgs(ConnectionArgs $) {
        this.agentSocketPath = $.agentSocketPath;
        this.dialErrorLimit = $.dialErrorLimit;
        this.host = $.host;
        this.password = $.password;
        this.perDialTimeout = $.perDialTimeout;
        this.port = $.port;
        this.privateKey = $.privateKey;
        this.privateKeyPassword = $.privateKeyPassword;
        this.proxyHost = $.proxyHost;
        this.proxyPassword = $.proxyPassword;
        this.proxyPort = $.proxyPort;
        this.proxyPrivateKey = $.proxyPrivateKey;
        this.proxyUser = $.proxyUser;
        this.user = $.user;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ConnectionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ConnectionArgs $;

        public Builder() {
            $ = new ConnectionArgs();
        }

        public Builder(ConnectionArgs defaults) {
            $ = new ConnectionArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param agentSocketPath SSH Agent socket path. Default to environment variable SSH_AUTH_SOCK if present.
         * 
         * @return builder
         * 
         */
        public Builder agentSocketPath(@Nullable Output<String> agentSocketPath) {
            $.agentSocketPath = agentSocketPath;
            return this;
        }

        /**
         * @param agentSocketPath SSH Agent socket path. Default to environment variable SSH_AUTH_SOCK if present.
         * 
         * @return builder
         * 
         */
        public Builder agentSocketPath(String agentSocketPath) {
            return agentSocketPath(Output.of(agentSocketPath));
        }

        /**
         * @param dialErrorLimit Max allowed errors on trying to dial the remote host. -1 set count to unlimited. Default value is 10.
         * 
         * @return builder
         * 
         */
        public Builder dialErrorLimit(@Nullable Output<Integer> dialErrorLimit) {
            $.dialErrorLimit = dialErrorLimit;
            return this;
        }

        /**
         * @param dialErrorLimit Max allowed errors on trying to dial the remote host. -1 set count to unlimited. Default value is 10.
         * 
         * @return builder
         * 
         */
        public Builder dialErrorLimit(Integer dialErrorLimit) {
            return dialErrorLimit(Output.of(dialErrorLimit));
        }

        /**
         * @param host The address of the resource to connect to.
         * 
         * @return builder
         * 
         */
        public Builder host(Output<String> host) {
            $.host = host;
            return this;
        }

        /**
         * @param host The address of the resource to connect to.
         * 
         * @return builder
         * 
         */
        public Builder host(String host) {
            return host(Output.of(host));
        }

        /**
         * @param password The password we should use for the connection.
         * 
         * @return builder
         * 
         */
        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        /**
         * @param password The password we should use for the connection.
         * 
         * @return builder
         * 
         */
        public Builder password(String password) {
            return password(Output.of(password));
        }

        /**
         * @param perDialTimeout Max number of seconds for each dial attempt. 0 implies no maximum. Default value is 15 seconds.
         * 
         * @return builder
         * 
         */
        public Builder perDialTimeout(@Nullable Output<Integer> perDialTimeout) {
            $.perDialTimeout = perDialTimeout;
            return this;
        }

        /**
         * @param perDialTimeout Max number of seconds for each dial attempt. 0 implies no maximum. Default value is 15 seconds.
         * 
         * @return builder
         * 
         */
        public Builder perDialTimeout(Integer perDialTimeout) {
            return perDialTimeout(Output.of(perDialTimeout));
        }

        /**
         * @param port The port to connect to.
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Double> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port to connect to.
         * 
         * @return builder
         * 
         */
        public Builder port(Double port) {
            return port(Output.of(port));
        }

        /**
         * @param privateKey The contents of an SSH key to use for the connection. This takes preference over the password if provided.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(@Nullable Output<String> privateKey) {
            $.privateKey = privateKey;
            return this;
        }

        /**
         * @param privateKey The contents of an SSH key to use for the connection. This takes preference over the password if provided.
         * 
         * @return builder
         * 
         */
        public Builder privateKey(String privateKey) {
            return privateKey(Output.of(privateKey));
        }

        /**
         * @param privateKeyPassword The password to use in case the private key is encrypted.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPassword(@Nullable Output<String> privateKeyPassword) {
            $.privateKeyPassword = privateKeyPassword;
            return this;
        }

        /**
         * @param privateKeyPassword The password to use in case the private key is encrypted.
         * 
         * @return builder
         * 
         */
        public Builder privateKeyPassword(String privateKeyPassword) {
            return privateKeyPassword(Output.of(privateKeyPassword));
        }

        /**
         * @param proxyHost The address of the bastion host to connect to.
         * 
         * @return builder
         * 
         */
        public Builder proxyHost(@Nullable Output<String> proxyHost) {
            $.proxyHost = proxyHost;
            return this;
        }

        /**
         * @param proxyHost The address of the bastion host to connect to.
         * 
         * @return builder
         * 
         */
        public Builder proxyHost(String proxyHost) {
            return proxyHost(Output.of(proxyHost));
        }

        /**
         * @param proxyPassword The password we should use for the bastion host connection.
         * 
         * @return builder
         * 
         */
        public Builder proxyPassword(@Nullable Output<String> proxyPassword) {
            $.proxyPassword = proxyPassword;
            return this;
        }

        /**
         * @param proxyPassword The password we should use for the bastion host connection.
         * 
         * @return builder
         * 
         */
        public Builder proxyPassword(String proxyPassword) {
            return proxyPassword(Output.of(proxyPassword));
        }

        public Builder proxyPort(@Nullable Output<Integer> proxyPort) {
            $.proxyPort = proxyPort;
            return this;
        }

        public Builder proxyPort(Integer proxyPort) {
            return proxyPort(Output.of(proxyPort));
        }

        /**
         * @param proxyPrivateKey The contents of an SSH key to use for the bastion host to setup the connection. This takes preference over the password if provided.
         * 
         * @return builder
         * 
         */
        public Builder proxyPrivateKey(@Nullable Output<String> proxyPrivateKey) {
            $.proxyPrivateKey = proxyPrivateKey;
            return this;
        }

        /**
         * @param proxyPrivateKey The contents of an SSH key to use for the bastion host to setup the connection. This takes preference over the password if provided.
         * 
         * @return builder
         * 
         */
        public Builder proxyPrivateKey(String proxyPrivateKey) {
            return proxyPrivateKey(Output.of(proxyPrivateKey));
        }

        /**
         * @param proxyUser The user that we should use for the bastion host connection.
         * 
         * @return builder
         * 
         */
        public Builder proxyUser(@Nullable Output<String> proxyUser) {
            $.proxyUser = proxyUser;
            return this;
        }

        /**
         * @param proxyUser The user that we should use for the bastion host connection.
         * 
         * @return builder
         * 
         */
        public Builder proxyUser(String proxyUser) {
            return proxyUser(Output.of(proxyUser));
        }

        /**
         * @param user The user that we should use for the connection.
         * 
         * @return builder
         * 
         */
        public Builder user(@Nullable Output<String> user) {
            $.user = user;
            return this;
        }

        /**
         * @param user The user that we should use for the connection.
         * 
         * @return builder
         * 
         */
        public Builder user(String user) {
            return user(Output.of(user));
        }

        public ConnectionArgs build() {
            $.dialErrorLimit = Codegen.integerProp("dialErrorLimit").output().arg($.dialErrorLimit).def(10).getNullable();
            $.host = Objects.requireNonNull($.host, "expected parameter 'host' to be non-null");
            $.perDialTimeout = Codegen.integerProp("perDialTimeout").output().arg($.perDialTimeout).def(15).getNullable();
            $.port = Codegen.doubleProp("port").output().arg($.port).def(2.2e+01).getNullable();
            $.proxyPort = Codegen.integerProp("proxyPort").output().arg($.proxyPort).def(22).getNullable();
            $.user = Codegen.stringProp("user").output().arg($.user).def("root").getNullable();
            return $;
        }
    }

}

// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.command.local;

import com.pulumi.asset.Archive;
import com.pulumi.asset.AssetOrArchive;
import com.pulumi.command.Utilities;
import com.pulumi.command.local.CommandArgs;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * A local command to be executed.
 * This command can be inserted into the life cycles of other resources using the
 * `dependsOn` or `parent` resource options. A command is considered to have
 * failed when it finished with a non-zero exit code. This will fail the CRUD step
 * of the `Command` resource.
 * 
 */
@ResourceType(type="command:local:Command")
public class Command extends com.pulumi.resources.CustomResource {
    /**
     * If the previous command&#39;s stdout and stderr (as generated by the prior create/update) is
     * injected into the environment of the next run as PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR.
     * Defaults to true.
     * 
     */
    @Export(name="addPreviousOutputInEnv", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> addPreviousOutputInEnv;

    /**
     * @return If the previous command&#39;s stdout and stderr (as generated by the prior create/update) is
     * injected into the environment of the next run as PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR.
     * Defaults to true.
     * 
     */
    public Output<Optional<Boolean>> addPreviousOutputInEnv() {
        return Codegen.optional(this.addPreviousOutputInEnv);
    }
    /**
     * An archive asset containing files found after running the command.
     * 
     */
    @Export(name="archive", refs={Archive.class}, tree="[0]")
    private Output</* @Nullable */ Archive> archive;

    /**
     * @return An archive asset containing files found after running the command.
     * 
     */
    public Output<Optional<Archive>> archive() {
        return Codegen.optional(this.archive);
    }
    /**
     * A list of path globs to return as a single archive asset after the command completes.
     * 
     * When specifying glob patterns the following rules apply:
     * - We only include files not directories for assets and archives.
     * - Path separators are `/` on all platforms - including Windows.
     * - Patterns starting with `!` are &#39;exclude&#39; rules.
     * - Rules are evaluated in order, so exclude rules should be after inclusion rules.
     * - `*` matches anything except `/`
     * - `**` matches anything, _including_ `/`
     * - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
     * - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
     * 
     * #### Example
     * 
     * Given the rules:
     * 
     * When evaluating against this folder:
     * 
     * The following paths will be returned:
     * 
     */
    @Export(name="archivePaths", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> archivePaths;

    /**
     * @return A list of path globs to return as a single archive asset after the command completes.
     * 
     * When specifying glob patterns the following rules apply:
     * - We only include files not directories for assets and archives.
     * - Path separators are `/` on all platforms - including Windows.
     * - Patterns starting with `!` are &#39;exclude&#39; rules.
     * - Rules are evaluated in order, so exclude rules should be after inclusion rules.
     * - `*` matches anything except `/`
     * - `**` matches anything, _including_ `/`
     * - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
     * - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
     * 
     * #### Example
     * 
     * Given the rules:
     * 
     * When evaluating against this folder:
     * 
     * The following paths will be returned:
     * 
     */
    public Output<Optional<List<String>>> archivePaths() {
        return Codegen.optional(this.archivePaths);
    }
    /**
     * A list of path globs to read after the command completes.
     * 
     * When specifying glob patterns the following rules apply:
     * - We only include files not directories for assets and archives.
     * - Path separators are `/` on all platforms - including Windows.
     * - Patterns starting with `!` are &#39;exclude&#39; rules.
     * - Rules are evaluated in order, so exclude rules should be after inclusion rules.
     * - `*` matches anything except `/`
     * - `**` matches anything, _including_ `/`
     * - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
     * - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
     * 
     * #### Example
     * 
     * Given the rules:
     * 
     * When evaluating against this folder:
     * 
     * The following paths will be returned:
     * 
     */
    @Export(name="assetPaths", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> assetPaths;

    /**
     * @return A list of path globs to read after the command completes.
     * 
     * When specifying glob patterns the following rules apply:
     * - We only include files not directories for assets and archives.
     * - Path separators are `/` on all platforms - including Windows.
     * - Patterns starting with `!` are &#39;exclude&#39; rules.
     * - Rules are evaluated in order, so exclude rules should be after inclusion rules.
     * - `*` matches anything except `/`
     * - `**` matches anything, _including_ `/`
     * - All returned paths are relative to the working directory (without leading `./`) e.g. `file.text` or `subfolder/file.txt`.
     * - For full details of the globbing syntax, see [github.com/gobwas/glob](https://github.com/gobwas/glob)
     * 
     * #### Example
     * 
     * Given the rules:
     * 
     * When evaluating against this folder:
     * 
     * The following paths will be returned:
     * 
     */
    public Output<Optional<List<String>>> assetPaths() {
        return Codegen.optional(this.assetPaths);
    }
    /**
     * A map of assets found after running the command.
     * The key is the relative path from the command dir
     * 
     */
    @Export(name="assets", refs={Map.class,String.class,AssetOrArchive.class}, tree="[0,1,2]")
    private Output</* @Nullable */ Map<String,AssetOrArchive>> assets;

    /**
     * @return A map of assets found after running the command.
     * The key is the relative path from the command dir
     * 
     */
    public Output<Optional<Map<String,AssetOrArchive>>> assets() {
        return Codegen.optional(this.assets);
    }
    /**
     * The command to run on create.
     * 
     */
    @Export(name="create", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> create;

    /**
     * @return The command to run on create.
     * 
     */
    public Output<Optional<String>> create() {
        return Codegen.optional(this.create);
    }
    /**
     * The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     * 
     */
    @Export(name="delete", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> delete;

    /**
     * @return The command to run on delete. The environment variables PULUMI_COMMAND_STDOUT
     * and PULUMI_COMMAND_STDERR are set to the stdout and stderr properties of the
     * Command resource from previous create or update steps.
     * 
     */
    public Output<Optional<String>> delete() {
        return Codegen.optional(this.delete);
    }
    /**
     * The directory from which to run the command from. If `dir` does not exist, then
     * `Command` will fail.
     * 
     */
    @Export(name="dir", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> dir;

    /**
     * @return The directory from which to run the command from. If `dir` does not exist, then
     * `Command` will fail.
     * 
     */
    public Output<Optional<String>> dir() {
        return Codegen.optional(this.dir);
    }
    /**
     * Additional environment variables available to the command&#39;s process.
     * 
     */
    @Export(name="environment", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> environment;

    /**
     * @return Additional environment variables available to the command&#39;s process.
     * 
     */
    public Output<Optional<Map<String,String>>> environment() {
        return Codegen.optional(this.environment);
    }
    /**
     * The program and arguments to run the command.
     * On Linux and macOS, defaults to: `[&#34;/bin/sh&#34;, &#34;-c&#34;]`. On Windows, defaults to: `[&#34;cmd&#34;, &#34;/C&#34;]`
     * 
     */
    @Export(name="interpreter", refs={List.class,String.class}, tree="[0,1]")
    private Output</* @Nullable */ List<String>> interpreter;

    /**
     * @return The program and arguments to run the command.
     * On Linux and macOS, defaults to: `[&#34;/bin/sh&#34;, &#34;-c&#34;]`. On Windows, defaults to: `[&#34;cmd&#34;, &#34;/C&#34;]`
     * 
     */
    public Output<Optional<List<String>>> interpreter() {
        return Codegen.optional(this.interpreter);
    }
    /**
     * If the command&#39;s stdout and stderr should be logged.
     * 
     */
    @Export(name="logOutput", refs={Boolean.class}, tree="[0]")
    private Output</* @Nullable */ Boolean> logOutput;

    /**
     * @return If the command&#39;s stdout and stderr should be logged.
     * 
     */
    public Output<Optional<Boolean>> logOutput() {
        return Codegen.optional(this.logOutput);
    }
    /**
     * The standard error of the command&#39;s process
     * 
     */
    @Export(name="stderr", refs={String.class}, tree="[0]")
    private Output<String> stderr;

    /**
     * @return The standard error of the command&#39;s process
     * 
     */
    public Output<String> stderr() {
        return this.stderr;
    }
    /**
     * Pass a string to the command&#39;s process as standard in
     * 
     */
    @Export(name="stdin", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> stdin;

    /**
     * @return Pass a string to the command&#39;s process as standard in
     * 
     */
    public Output<Optional<String>> stdin() {
        return Codegen.optional(this.stdin);
    }
    /**
     * The standard output of the command&#39;s process
     * 
     */
    @Export(name="stdout", refs={String.class}, tree="[0]")
    private Output<String> stdout;

    /**
     * @return The standard output of the command&#39;s process
     * 
     */
    public Output<String> stdout() {
        return this.stdout;
    }
    /**
     * Trigger replacements on changes to this input.
     * 
     */
    @Export(name="triggers", refs={List.class,Object.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Object>> triggers;

    /**
     * @return Trigger replacements on changes to this input.
     * 
     */
    public Output<Optional<List<Object>>> triggers() {
        return Codegen.optional(this.triggers);
    }
    /**
     * The command to run on update, if empty, create will
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
     * are set to the stdout and stderr properties of the Command resource from previous
     * create or update steps.
     * 
     */
    @Export(name="update", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> update;

    /**
     * @return The command to run on update, if empty, create will
     * run again. The environment variables PULUMI_COMMAND_STDOUT and PULUMI_COMMAND_STDERR
     * are set to the stdout and stderr properties of the Command resource from previous
     * create or update steps.
     * 
     */
    public Output<Optional<String>> update() {
        return Codegen.optional(this.update);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Command(String name) {
        this(name, CommandArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Command(String name, @Nullable CommandArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Command(String name, @Nullable CommandArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("command:local:Command", name, args == null ? CommandArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private Command(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("command:local:Command", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Command get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Command(name, id, options);
    }
}

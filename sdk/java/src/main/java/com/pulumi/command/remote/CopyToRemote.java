// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.command.remote;

import com.pulumi.asset.AssetOrArchive;
import com.pulumi.command.Utilities;
import com.pulumi.command.remote.CopyToRemoteArgs;
import com.pulumi.command.remote.outputs.Connection;
import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import java.lang.Object;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * Copy an Asset or Archive to a remote host.
 * 
 */
@ResourceType(type="command:remote:CopyToRemote")
public class CopyToRemote extends com.pulumi.resources.CustomResource {
    /**
     * The parameters with which to connect to the remote host.
     * 
     */
    @Export(name="connection", refs={Connection.class}, tree="[0]")
    private Output<Connection> connection;

    /**
     * @return The parameters with which to connect to the remote host.
     * 
     */
    public Output<Connection> connection() {
        return this.connection;
    }
    /**
     * The destination path on the remote host. The last element of the path will be created if it doesn&#39;t exist but it&#39;s an error when additional elements don&#39;t exist. When the remote path is an existing directory, the source file or directory will be copied into that directory. When the source is a file and the remote path is an existing file, that file will be overwritten. When the source is a directory and the remote path an existing file, the copy will fail.
     * 
     */
    @Export(name="remotePath", refs={String.class}, tree="[0]")
    private Output<String> remotePath;

    /**
     * @return The destination path on the remote host. The last element of the path will be created if it doesn&#39;t exist but it&#39;s an error when additional elements don&#39;t exist. When the remote path is an existing directory, the source file or directory will be copied into that directory. When the source is a file and the remote path is an existing file, that file will be overwritten. When the source is a directory and the remote path an existing file, the copy will fail.
     * 
     */
    public Output<String> remotePath() {
        return this.remotePath;
    }
    /**
     * An [asset or an archive](https://www.pulumi.com/docs/concepts/assets-archives/) to upload as the source of the copy. It must be path-based, i.e., be a `FileAsset` or a `FileArchive`. The item will be copied as-is; archives like .tgz will not be unpacked. Directories are copied recursively, overwriting existing files.
     * 
     */
    @Export(name="source", refs={AssetOrArchive.class}, tree="[0]")
    private Output<AssetOrArchive> source;

    /**
     * @return An [asset or an archive](https://www.pulumi.com/docs/concepts/assets-archives/) to upload as the source of the copy. It must be path-based, i.e., be a `FileAsset` or a `FileArchive`. The item will be copied as-is; archives like .tgz will not be unpacked. Directories are copied recursively, overwriting existing files.
     * 
     */
    public Output<AssetOrArchive> source() {
        return this.source;
    }
    /**
     * Trigger replacements on changes to this input.
     * 
     */
    @Export(name="triggers", refs={List.class,Object.class}, tree="[0,1]")
    private Output</* @Nullable */ List<Object>> triggers;

    /**
     * @return Trigger replacements on changes to this input.
     * 
     */
    public Output<Optional<List<Object>>> triggers() {
        return Codegen.optional(this.triggers);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public CopyToRemote(String name) {
        this(name, CopyToRemoteArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public CopyToRemote(String name, CopyToRemoteArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public CopyToRemote(String name, CopyToRemoteArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("command:remote:CopyToRemote", name, args == null ? CopyToRemoteArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private CopyToRemote(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("command:remote:CopyToRemote", name, null, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "connection"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static CopyToRemote get(String name, Output<String> id, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new CopyToRemote(name, id, options);
    }
}

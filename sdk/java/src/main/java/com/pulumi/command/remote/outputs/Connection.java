// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.command.remote.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class Connection {
    /**
     * @return The address of the resource to connect to.
     * 
     */
    private final String host;
    /**
     * @return The password we should use for the connection.
     * 
     */
    private final @Nullable String password;
    /**
     * @return The port to connect to.
     * 
     */
    private final @Nullable Double port;
    /**
     * @return The contents of an SSH key to use for the connection. This takes preference over the password if provided.
     * 
     */
    private final @Nullable String privateKey;
    /**
     * @return The user that we should use for the connection.
     * 
     */
    private final @Nullable String user;

    @CustomType.Constructor
    private Connection(
        @CustomType.Parameter("host") String host,
        @CustomType.Parameter("password") @Nullable String password,
        @CustomType.Parameter("port") @Nullable Double port,
        @CustomType.Parameter("privateKey") @Nullable String privateKey,
        @CustomType.Parameter("user") @Nullable String user) {
        this.host = host;
        this.password = password;
        this.port = port;
        this.privateKey = privateKey;
        this.user = user;
    }

    /**
     * @return The address of the resource to connect to.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return The password we should use for the connection.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return The port to connect to.
     * 
     */
    public Optional<Double> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return The contents of an SSH key to use for the connection. This takes preference over the password if provided.
     * 
     */
    public Optional<String> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }
    /**
     * @return The user that we should use for the connection.
     * 
     */
    public Optional<String> user() {
        return Optional.ofNullable(this.user);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Connection defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private String host;
        private @Nullable String password;
        private @Nullable Double port;
        private @Nullable String privateKey;
        private @Nullable String user;

        public Builder() {
    	      // Empty
        }

        public Builder(Connection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.host = defaults.host;
    	      this.password = defaults.password;
    	      this.port = defaults.port;
    	      this.privateKey = defaults.privateKey;
    	      this.user = defaults.user;
        }

        public Builder host(String host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        public Builder port(@Nullable Double port) {
            this.port = port;
            return this;
        }
        public Builder privateKey(@Nullable String privateKey) {
            this.privateKey = privateKey;
            return this;
        }
        public Builder user(@Nullable String user) {
            this.user = user;
            return this;
        }        public Connection build() {
            return new Connection(host, password, port, privateKey, user);
        }
    }
}

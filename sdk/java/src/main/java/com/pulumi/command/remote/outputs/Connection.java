// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.command.remote.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Double;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class Connection {
    /**
     * @return SSH Agent socket path. Default to environment variable SSH_AUTH_SOCK if present.
     * 
     */
    private @Nullable String agentSocketPath;
    /**
     * @return Max allowed errors on trying to dial the remote host. -1 set count to unlimited. Default value is 10
     * 
     */
    private @Nullable Integer dialErrorLimit;
    /**
     * @return The address of the resource to connect to.
     * 
     */
    private String host;
    /**
     * @return The password we should use for the connection.
     * 
     */
    private @Nullable String password;
    /**
     * @return The port to connect to.
     * 
     */
    private @Nullable Double port;
    /**
     * @return The contents of an SSH key to use for the connection. This takes preference over the password if provided.
     * 
     */
    private @Nullable String privateKey;
    /**
     * @return The password to use in case the private key is encrypted.
     * 
     */
    private @Nullable String privateKeyPassword;
    /**
     * @return The address of the bastion host to connect to.
     * 
     */
    private @Nullable String proxyHost;
    /**
     * @return The password we should use for the bastion host connection.
     * 
     */
    private @Nullable String proxyPassword;
    private @Nullable Integer proxyPort;
    /**
     * @return The contents of an SSH key to use for the bastion host to setup the connection. This takes preference over the password if provided.
     * 
     */
    private @Nullable String proxyPrivateKey;
    /**
     * @return The user that we should use for the bastion host connection.
     * 
     */
    private @Nullable String proxyUser;
    /**
     * @return The user that we should use for the connection.
     * 
     */
    private @Nullable String user;

    private Connection() {}
    /**
     * @return SSH Agent socket path. Default to environment variable SSH_AUTH_SOCK if present.
     * 
     */
    public Optional<String> agentSocketPath() {
        return Optional.ofNullable(this.agentSocketPath);
    }
    /**
     * @return Max allowed errors on trying to dial the remote host. -1 set count to unlimited. Default value is 10
     * 
     */
    public Optional<Integer> dialErrorLimit() {
        return Optional.ofNullable(this.dialErrorLimit);
    }
    /**
     * @return The address of the resource to connect to.
     * 
     */
    public String host() {
        return this.host;
    }
    /**
     * @return The password we should use for the connection.
     * 
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }
    /**
     * @return The port to connect to.
     * 
     */
    public Optional<Double> port() {
        return Optional.ofNullable(this.port);
    }
    /**
     * @return The contents of an SSH key to use for the connection. This takes preference over the password if provided.
     * 
     */
    public Optional<String> privateKey() {
        return Optional.ofNullable(this.privateKey);
    }
    /**
     * @return The password to use in case the private key is encrypted.
     * 
     */
    public Optional<String> privateKeyPassword() {
        return Optional.ofNullable(this.privateKeyPassword);
    }
    /**
     * @return The address of the bastion host to connect to.
     * 
     */
    public Optional<String> proxyHost() {
        return Optional.ofNullable(this.proxyHost);
    }
    /**
     * @return The password we should use for the bastion host connection.
     * 
     */
    public Optional<String> proxyPassword() {
        return Optional.ofNullable(this.proxyPassword);
    }
    public Optional<Integer> proxyPort() {
        return Optional.ofNullable(this.proxyPort);
    }
    /**
     * @return The contents of an SSH key to use for the bastion host to setup the connection. This takes preference over the password if provided.
     * 
     */
    public Optional<String> proxyPrivateKey() {
        return Optional.ofNullable(this.proxyPrivateKey);
    }
    /**
     * @return The user that we should use for the bastion host connection.
     * 
     */
    public Optional<String> proxyUser() {
        return Optional.ofNullable(this.proxyUser);
    }
    /**
     * @return The user that we should use for the connection.
     * 
     */
    public Optional<String> user() {
        return Optional.ofNullable(this.user);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(Connection defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String agentSocketPath;
        private @Nullable Integer dialErrorLimit;
        private String host;
        private @Nullable String password;
        private @Nullable Double port;
        private @Nullable String privateKey;
        private @Nullable String privateKeyPassword;
        private @Nullable String proxyHost;
        private @Nullable String proxyPassword;
        private @Nullable Integer proxyPort;
        private @Nullable String proxyPrivateKey;
        private @Nullable String proxyUser;
        private @Nullable String user;
        public Builder() {}
        public Builder(Connection defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.agentSocketPath = defaults.agentSocketPath;
    	      this.dialErrorLimit = defaults.dialErrorLimit;
    	      this.host = defaults.host;
    	      this.password = defaults.password;
    	      this.port = defaults.port;
    	      this.privateKey = defaults.privateKey;
    	      this.privateKeyPassword = defaults.privateKeyPassword;
    	      this.proxyHost = defaults.proxyHost;
    	      this.proxyPassword = defaults.proxyPassword;
    	      this.proxyPort = defaults.proxyPort;
    	      this.proxyPrivateKey = defaults.proxyPrivateKey;
    	      this.proxyUser = defaults.proxyUser;
    	      this.user = defaults.user;
        }

        @CustomType.Setter
        public Builder agentSocketPath(@Nullable String agentSocketPath) {
            this.agentSocketPath = agentSocketPath;
            return this;
        }
        @CustomType.Setter
        public Builder dialErrorLimit(@Nullable Integer dialErrorLimit) {
            this.dialErrorLimit = dialErrorLimit;
            return this;
        }
        @CustomType.Setter
        public Builder host(String host) {
            this.host = Objects.requireNonNull(host);
            return this;
        }
        @CustomType.Setter
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }
        @CustomType.Setter
        public Builder port(@Nullable Double port) {
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder privateKey(@Nullable String privateKey) {
            this.privateKey = privateKey;
            return this;
        }
        @CustomType.Setter
        public Builder privateKeyPassword(@Nullable String privateKeyPassword) {
            this.privateKeyPassword = privateKeyPassword;
            return this;
        }
        @CustomType.Setter
        public Builder proxyHost(@Nullable String proxyHost) {
            this.proxyHost = proxyHost;
            return this;
        }
        @CustomType.Setter
        public Builder proxyPassword(@Nullable String proxyPassword) {
            this.proxyPassword = proxyPassword;
            return this;
        }
        @CustomType.Setter
        public Builder proxyPort(@Nullable Integer proxyPort) {
            this.proxyPort = proxyPort;
            return this;
        }
        @CustomType.Setter
        public Builder proxyPrivateKey(@Nullable String proxyPrivateKey) {
            this.proxyPrivateKey = proxyPrivateKey;
            return this;
        }
        @CustomType.Setter
        public Builder proxyUser(@Nullable String proxyUser) {
            this.proxyUser = proxyUser;
            return this;
        }
        @CustomType.Setter
        public Builder user(@Nullable String user) {
            this.user = user;
            return this;
        }
        public Connection build() {
            final var o = new Connection();
            o.agentSocketPath = agentSocketPath;
            o.dialErrorLimit = dialErrorLimit;
            o.host = host;
            o.password = password;
            o.port = port;
            o.privateKey = privateKey;
            o.privateKeyPassword = privateKeyPassword;
            o.proxyHost = proxyHost;
            o.proxyPassword = proxyPassword;
            o.proxyPort = proxyPort;
            o.proxyPrivateKey = proxyPrivateKey;
            o.proxyUser = proxyUser;
            o.user = user;
            return o;
        }
    }
}

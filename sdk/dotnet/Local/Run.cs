// *** WARNING: this file was generated by pulumigen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Command.Local
{
    public static class Run
    {
        /// <summary>
        /// A local command to be executed.
        /// This command will always be run on any preview or deployment
        /// </summary>
        public static Task<RunResult> InvokeAsync(RunArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<RunResult>("command:local:run", args ?? new RunArgs(), options.WithDefaults());

        /// <summary>
        /// A local command to be executed.
        /// This command will always be run on any preview or deployment
        /// </summary>
        public static Output<RunResult> Invoke(RunInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<RunResult>("command:local:run", args ?? new RunInvokeArgs(), options.WithDefaults());
    }


    public sealed class RunArgs : Pulumi.InvokeArgs
    {
        [Input("assets")]
        private List<string>? _assets;

        /// <summary>
        /// A list of glob paths to search after the command completes and return as an archive
        /// </summary>
        public List<string> Assets
        {
            get => _assets ?? (_assets = new List<string>());
            set => _assets = value;
        }

        /// <summary>
        /// The command to run.
        /// </summary>
        [Input("command", required: true)]
        public string Command { get; set; } = null!;

        /// <summary>
        /// The working directory in which to run the command from.
        /// </summary>
        [Input("dir")]
        public string? Dir { get; set; }

        [Input("environment")]
        private Dictionary<string, string>? _environment;

        /// <summary>
        /// Additional environment variables available to the command's process.
        /// </summary>
        public Dictionary<string, string> Environment
        {
            get => _environment ?? (_environment = new Dictionary<string, string>());
            set => _environment = value;
        }

        [Input("interpreter")]
        private List<string>? _interpreter;

        /// <summary>
        /// The program and arguments to run the command.
        /// On Linux and macOS, defaults to: `["/bin/sh", "-c"]`. On Windows, defaults to: `["cmd", "/C"]`
        /// </summary>
        public List<string> Interpreter
        {
            get => _interpreter ?? (_interpreter = new List<string>());
            set => _interpreter = value;
        }

        /// <summary>
        /// Pass a string to the command's process as standard in
        /// </summary>
        [Input("stdin")]
        public string? Stdin { get; set; }

        public RunArgs()
        {
        }
    }

    public sealed class RunInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("assets")]
        private InputList<string>? _assets;

        /// <summary>
        /// A list of glob paths to search after the command completes and return as an archive
        /// </summary>
        public InputList<string> Assets
        {
            get => _assets ?? (_assets = new InputList<string>());
            set => _assets = value;
        }

        /// <summary>
        /// The command to run.
        /// </summary>
        [Input("command", required: true)]
        public Input<string> Command { get; set; } = null!;

        /// <summary>
        /// The working directory in which to run the command from.
        /// </summary>
        [Input("dir")]
        public Input<string>? Dir { get; set; }

        [Input("environment")]
        private InputMap<string>? _environment;

        /// <summary>
        /// Additional environment variables available to the command's process.
        /// </summary>
        public InputMap<string> Environment
        {
            get => _environment ?? (_environment = new InputMap<string>());
            set => _environment = value;
        }

        [Input("interpreter")]
        private InputList<string>? _interpreter;

        /// <summary>
        /// The program and arguments to run the command.
        /// On Linux and macOS, defaults to: `["/bin/sh", "-c"]`. On Windows, defaults to: `["cmd", "/C"]`
        /// </summary>
        public InputList<string> Interpreter
        {
            get => _interpreter ?? (_interpreter = new InputList<string>());
            set => _interpreter = value;
        }

        /// <summary>
        /// Pass a string to the command's process as standard in
        /// </summary>
        [Input("stdin")]
        public Input<string>? Stdin { get; set; }

        public RunInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class RunResult
    {
        /// <summary>
        /// An archive of assets found after running the command.
        /// </summary>
        public readonly Archive? Assets;
        /// <summary>
        /// The command to run.
        /// </summary>
        public readonly string Command;
        /// <summary>
        /// The directory from which the command was run from.
        /// </summary>
        public readonly string? Dir;
        /// <summary>
        /// Additional environment variables available to the command's process.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Environment;
        /// <summary>
        /// The program and arguments to run the command.
        /// For example: `["/bin/sh", "-c"]`
        /// </summary>
        public readonly ImmutableArray<string> Interpreter;
        /// <summary>
        /// The standard error of the command's process
        /// </summary>
        public readonly string Stderr;
        /// <summary>
        /// String passed to the command's process as standard in.
        /// </summary>
        public readonly string Stdin;
        /// <summary>
        /// The standard output of the command's process
        /// </summary>
        public readonly string? Stdout;

        [OutputConstructor]
        private RunResult(
            Archive? assets,

            string command,

            string? dir,

            ImmutableDictionary<string, string>? environment,

            ImmutableArray<string> interpreter,

            string stderr,

            string stdin,

            string? stdout)
        {
            Assets = assets;
            Command = command;
            Dir = dir;
            Environment = environment;
            Interpreter = interpreter;
            Stderr = stderr;
            Stdin = stdin;
            Stdout = stdout;
        }
    }
}

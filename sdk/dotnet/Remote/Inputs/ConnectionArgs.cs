// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Command.Remote.Inputs
{

    /// <summary>
    /// Instructions for how to connect to a remote endpoint.
    /// </summary>
    public sealed class ConnectionArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// SSH Agent socket path. Default to environment variable SSH_AUTH_SOCK if present.
        /// </summary>
        [Input("agentSocketPath")]
        public Input<string>? AgentSocketPath { get; set; }

        /// <summary>
        /// Max allowed errors on trying to dial the remote host. -1 set count to unlimited. Default value is 10
        /// </summary>
        [Input("dialErrorLimit")]
        public Input<int>? DialErrorLimit { get; set; }

        /// <summary>
        /// The address of the resource to connect to.
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// The password we should use for the connection.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        /// <summary>
        /// The port to connect to.
        /// </summary>
        [Input("port")]
        public Input<double>? Port { get; set; }

        /// <summary>
        /// The contents of an SSH key to use for the connection. This takes preference over the password if provided.
        /// </summary>
        [Input("privateKey")]
        public Input<string>? PrivateKey { get; set; }

        /// <summary>
        /// The password to use in case the private key is encrypted.
        /// </summary>
        [Input("privateKeyPassword")]
        public Input<string>? PrivateKeyPassword { get; set; }

        /// <summary>
        /// The address of the bastion host to connect to.
        /// </summary>
        [Input("proxyHost")]
        public Input<string>? ProxyHost { get; set; }

        /// <summary>
        /// The password we should use for the bastion host connection.
        /// </summary>
        [Input("proxyPassword")]
        public Input<string>? ProxyPassword { get; set; }

        [Input("proxyPort")]
        public Input<int>? ProxyPort { get; set; }

        /// <summary>
        /// The contents of an SSH key to use for the bastion host to setup the connection. This takes preference over the password if provided.
        /// </summary>
        [Input("proxyPrivateKey")]
        public Input<string>? ProxyPrivateKey { get; set; }

        /// <summary>
        /// The user that we should use for the bastion host connection.
        /// </summary>
        [Input("proxyUser")]
        public Input<string>? ProxyUser { get; set; }

        /// <summary>
        /// The user that we should use for the connection.
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public ConnectionArgs()
        {
            DialErrorLimit = 10;
            Port = 22;
            ProxyPort = 22;
            User = "root";
        }
        public static new ConnectionArgs Empty => new ConnectionArgs();
    }
}
